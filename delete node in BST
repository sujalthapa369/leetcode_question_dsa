/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    TreeNode* find(TreeNode* root) {
        while (root && root->left != nullptr) {
            root = root->left;
        }
        return root;
    }
      TreeNode* deleteNode(TreeNode* root, int key) {
        if (root == nullptr) {
            return nullptr; 
        }

        if (key < root->val) {
            root->left = deleteNode(root->left, key); 
        } else if (key > root->val) {
            root->right = deleteNode(root->right, key);
        } else {
            if (root->left == nullptr && root->right == nullptr) {
                // Case 1: No child
                delete root;
                return nullptr;
            } else if (root->left == nullptr) {
                // Case 2: One child (right)
                TreeNode* temp = root->right;
                delete root;
                return temp;
            } else if (root->right == nullptr) {
                // Case 2: One child (left)
                TreeNode* temp = root->left;
                delete root;
                return temp;
            } else {
                // Case 3: Two children
                TreeNode* temp = find(root->right); 
                root->val = temp->val;                
                root->right = deleteNode(root->right, temp->val);
            }
        }
        return root;
    }
};
